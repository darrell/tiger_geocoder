# first pass at grammar for implementing a more formal
# address parser. Elements in curly braces will presumably 
# come from DB lookup tables.
# (how to express beginning of line in BNF?)
# normalize(location text)

<location> ::== (<street> <intersectionsep> <street>) | 
                (<address>? <addrsep> <place>? <addrsep> 
                 <unit>? <addrsep> <addrstate>? <addrsep>
                 <zipcode>?);

<address> ::== <house>? <whitespace> <street>;

<street> ::== <prefixes> <whitespace> 
             <streetname> <whitespace> 
             <suffixes>;
             
# cope with michigan rural addresses?
<house> :== (<housenumber>|<houserange>) <whitespace>+;
<housenumber> :== 'G'*<digit>+;
<houserange> ::== <housenumber>-<housenumber>;

# street components
<predir> ::== {List of predirs};
<pretype> ::== {List of pretypes};
<prequal> ::== {List of prequals};
<prefixes> ::== <predir>? <whitespace> <pretyp>? <whitespace> <prequal>?;

<streetname> ::== <word>+ | <digit>+<numbersuffix>*;

<suftype> ::== {List of suftypes};
<sufdir> ::== {List of sufdirs};
<sufqual> ::== {List of sufquals};
<suffixes> ::== <suftype>? <whitespace> <sufdir>? <whitespace>  <sufqual>?;
# city
<place> ::== <addrsep> <placename>;
<placename> ::== <word> <wordspace>*;

# units
<unit> ::== <unittype> <whitespace>+ <unitno>;
<unittype> ::== {list of possible unit types};
<unitno> ::== <alphanum>+| "#";

# state
<state> ::== <addrsep> <statename>;
<statename> ::== {List of state names & abbrevs};

#zip
<zipcode> ::== <zip5><zipsuf>?;

<zip5> ::== <digit><digit><digit><digit><digit>;

<zipsuf> ::== <zipsep>?<zip4>
<zip4> ::== <digit><digit><digit><digit><digit>;

<zipsep> ::== "+" | "-";

# other bits
<digit> ::== 1/2/3/4/5/6/7/8/9/0
<wordspace> ::== <whitespace>+<word>
<numbersuffix> ::== 'st'| 'th'| 'nd'

<word> ::== [a-z.-]+;

<alphanum> ::== <digit>+|<word>+;

<intersectionsep> ::== <whitespace>+ <and> <whitespace>+;
<and> ::== '&' | 'and';

<addrsep> ::== <addrsep-char>+

<addrsep-char> ::== <whitespace>+| <whitespace>* ',' <whitespace>*;

<whitespace> ::==  <whitespace-char>+ ;
<whitespace-char> ::== "[beginning of line]" | " " | "\t" | "\r" | "\n" ;

